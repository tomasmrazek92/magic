{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/globalFunctions.js", "../src/styles.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// --- Swipers Start ---\nlet windowWidth = window.innerWidth;\n// Create an object to hold unique counters for each classSelector.\nlet uniqueIdCounters = {};\nlet shouldInitializeImmediately = false; // Add this flag at the top of your function\n\nexport const createResponsiveSwiper = (\n  componentSelector,\n  swiperSelector,\n  classSelector,\n  options,\n  mode\n) => {\n  // Step 2: Fetch elements by their componentSelector; if none, exit the function\n  let elements = $(componentSelector).add(swiperSelector);\n  console.log(elements.length);\n  if (elements.length !== 2) return;\n\n  // Reset the uniqueIdCounters for this classSelector to 0\n  uniqueIdCounters[classSelector] = 0;\n\n  // Step 3: Loop through each matched element\n  uniqueIdCounters[classSelector] = uniqueIdCounters[classSelector] || 0;\n  elements.each(function () {\n    // Generate a unique key for this instance based on the classSelector and a counter\n    let uniqueKey = `${classSelector}_${uniqueIdCounters[classSelector]}`;\n\n    // Step 4: Add unique classes to swiper container, arrows and pagination for this instance\n    addUniqueClassesToElements(this, swiperSelector, uniqueKey, [\n      '.swiper-arrow',\n      '.swiper-navigation',\n      '.swiper-drag-wrapper',\n    ]);\n\n    // Step 5: Merge default and passed swiper options\n    let swiperOptions = getMergedSwiperOptions(options, uniqueKey);\n\n    // Step 6: Initialize or destroy swipers based on media query and passed mode\n    manageSwiperInstance(this, swiperSelector, uniqueKey, classSelector, swiperOptions, mode);\n\n    // Increment unique ID counter for the specific classSelector\n    uniqueIdCounters[classSelector]++;\n  });\n};\n\n// Adds unique classes to swiper and control elements\nconst addUniqueClassesToElements = (context, swiperSelector, uniqueKey, controlSelectors) => {\n  controlSelectors.forEach((selector) => {\n    $(context).find(selector).addClass(uniqueKey);\n  });\n  $(context).find(swiperSelector).addClass(uniqueKey);\n};\n\n// Merge default and custom swiper options\nconst getMergedSwiperOptions = (options, uniqueKey) => {\n  // Default pagination config\n  const defaultPagination = {\n    el: `.swiper-navigation.${uniqueKey}`,\n    type: 'bullets',\n    bulletActiveClass: 'swiper-bullet-active',\n    bulletClass: 'swiper-bullet',\n    clickable: true,\n  };\n\n  // Merge pagination options if provided, otherwise use default\n  const paginationConfig = options.pagination\n    ? { ...defaultPagination, ...options.pagination }\n    : defaultPagination;\n\n  return {\n    speed: 1000,\n    navigation: {\n      prevEl: `.swiper-arrow.prev.${uniqueKey}`,\n      nextEl: `.swiper-arrow.next.${uniqueKey}`,\n    },\n    pagination: paginationConfig,\n    on: {\n      init: function () {\n        // Delay the refresh slightly to ensure Swiper has finished DOM updates\n        setTimeout(() => {\n          ScrollTrigger.refresh();\n        }, 100);\n      },\n\n      slideChange: function () {\n        ScrollTrigger.refresh();\n      },\n\n      resize: function () {\n        ScrollTrigger.refresh();\n      },\n    },\n    ...options,\n  };\n};\n\n// This function manages Swiper instances: initializing or destroying them based on certain conditions\nconst manageSwiperInstance = (\n  context,\n  swiperSelector,\n  uniqueKey,\n  classSelector,\n  swiperOptions,\n  mode\n) => {\n  // Initialize the nested object for storing Swiper instances if it doesn't exist\n  swipers[classSelector] = swipers[classSelector] || {};\n  swipers[classSelector][uniqueKey] = swipers[classSelector][uniqueKey] || {};\n\n  // Fetch the existing Swiper instance information, if it exists\n  let existingInstance = swipers[classSelector][uniqueKey];\n  let existingSwiper = existingInstance.swiperInstance;\n\n  // Determine under what conditions the Swiper should be initialized\n  let shouldInitDesktop = mode === 'desktop' && window.matchMedia('(min-width: 992px)').matches;\n  let shouldInitMobile =\n    mode === 'mobile' && window.matchMedia('(min-width: 0px) and (max-width: 991px)').matches;\n  let shouldInitAll = mode === 'all';\n\n  // Destroy function\n  const destroySwiper = () => {\n    if (existingSwiper) {\n      existingSwiper.destroy(true, true);\n      delete swipers[classSelector][uniqueKey];\n      console.log('Swiper destroyed for', swiperSelector, 'with uniqueKey', uniqueKey);\n    }\n  };\n\n  // Initialize function\n  const initSwiper = () => {\n    const swiperElement = $(`${swiperSelector}.${uniqueKey}`)[0];\n    if (!swiperElement) return;\n\n    if (!existingSwiper && (shouldInitDesktop || shouldInitMobile || shouldInitAll)) {\n      let swiper = new Swiper(`${swiperSelector}.${uniqueKey}`, swiperOptions);\n      swipers[classSelector][uniqueKey] = {\n        swiperInstance: swiper,\n        mode: shouldInitDesktop ? 'desktop' : shouldInitMobile ? 'mobile' : 'all',\n        initialized: true,\n      };\n      console.log('Swiper initialized for', swiperSelector, 'with uniqueKey', uniqueKey);\n    }\n  };\n\n  // Check the conditions and either destroy or initialize\n  if (!shouldInitDesktop && mode === 'desktop') destroySwiper();\n  else if (!shouldInitMobile && mode === 'mobile') destroySwiper();\n  else if (!shouldInitAll && mode === 'all') destroySwiper();\n  else if ((shouldInitDesktop || shouldInitMobile || shouldInitAll) && !existingSwiper) {\n    initSwiper();\n  }\n};\n\n// Function to initialize swipers from an array of instances\nexport const runSwipers = (swiperInstances) => {\n  swiperInstances.forEach((instance) => {\n    createResponsiveSwiper(...instance);\n  });\n};\n\nexport const initSwipers = (swiperInstances, swipersState) => {\n  // Load\n  runSwipers(swiperInstances);\n\n  // Resize\n  window.addEventListener('resize', function () {\n    if (window.innerWidth !== windowWidth) {\n      windowWidth = window.innerWidth;\n      runSwipers(swiperInstances);\n    }\n  });\n};\n", "import { initSwipers } from './utils/globalFunctions';\n\nlet currentVisual;\nlet currentColor = 0;\nlet noColor = !$('.styles_hero-color_list').length;\nlet noSwiper = !$('.section_styles-hero .swiper-tabs').length;\n\nfunction updateColorType(index) {\n  let pickerVisuals = $('.styles_hero-visual');\n\n  if (noColor) {\n    pickerVisuals = pickerVisuals.find('img');\n  }\n\n  // Reset\n  pickerVisuals.hide();\n  pickerVisuals.find('img').hide();\n  pickerVisuals.each(function () {\n    $(this).find('img').eq(currentColor).show();\n  });\n\n  currentVisual = pickerVisuals.eq(index);\n  currentVisual.css('display', 'flex');\n}\n\nfunction initColorPicker() {\n  let pickerList = $('.styles_hero-color_list');\n  let pickerItem = $('.styles_hero-color_item');\n  let circle = '.styles_hero-color_item-inner';\n  let label = '.styles_hero-color_item-label';\n\n  $(circle).eq(0).addClass('is-active');\n\n  pickerList.find(pickerItem).on('click', function () {\n    let index = $(this).index();\n\n    // Active Class\n    pickerItem.find(circle).removeClass('is-active');\n    pickerItem.eq(index).find(circle).addClass('is-active');\n\n    // Label\n    $(label).filter('.cc-top').find('p').text($(this).find(label).text());\n\n    // Visua\u016F\n    currentColor = index;\n    currentVisual.find('img').hide();\n    currentVisual.find('img').eq(currentColor).fadeIn();\n  });\n}\n\n// Sample data for swiperInstances, specific to this page\nconst swiperInstances = [\n  [\n    '.section_styles-hero',\n    '.swiper-tabs',\n    'tabs-slider',\n    {\n      slidesPerView: 'auto',\n      loop: true,\n      threshold: 20,\n      slideToClickedSlide: true,\n      on: {\n        init: () => {\n          updateColorType(0);\n          initColorPicker();\n        },\n        slideChange: (swiper) => {\n          updateColorType(swiper.realIndex);\n        },\n      },\n    },\n    'all',\n  ],\n];\n\n// Fallback for no slider configuration\nif (noSwiper) {\n  noSwiper = true;\n  updateColorType(0);\n  initColorPicker();\n}\n\n// Initialize swipers with instances specific to this page\ninitSwipers(swiperInstances);\n"],
  "mappings": "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",
  "names": ["swiperInstances"]
}
